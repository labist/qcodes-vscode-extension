{
    
    
    "imports for qcodes": {
    "prefix": "qcodes",
    "body": [
        "#Magics",
        "%load_ext autoreload",
        "%autoreload 2",
        "#General imports",
        "import matplotlib.pyplot as plt",
        "import numpy as np",
        "import pandas as pd",
        "#Qcodes imports",
        "import qcodes",
        "from qcodes import Station, load_or_create_experiment, initialise_database, Measurement", 
        "\n",
        "#%%",
        "configuration['core']['db_location'] = '${1: path_to_db}' ",
        "initialize_database()",
        "load_or_create_experiment('${2: experiment name}', sample_name='$3')"
    ],
    "description": "Log output to console"
},

"qc_measurement": {
    "prefix": "qc_measure",
    "body": [
    "meas = Measurement()",
    "meas.register_parameter('$1')",
    "with meas.run() as datasaver:",
    "   datasaver.add_result('$2')"	
    ],
    "description": "Qc measurement skeletton"
}, 

"qc_dummy" :{
    "prefix": "qc_dummy", 
    "body": [
        "from qcodes.tests.instrument_mocks import DummyInstrument",
        "def gauss_model(x0: float, y0: float, sigma: float, noise: float=0.0005):",
        "   while True:",
        "       (x, y) = yield",
        "       model = np.exp(-((x0-x)**2+(y0-y)**2)/2/sigma**2)*np.exp(2*sigma**2)",
        "       noise = np.random.randn()*noise",
        "       yield model + noise",
        "\n",
        "gauss = gauss_model(0.1, 0.2, 0.25)",
        "next(gauss)",
        "\n",
        "def measure_gauss(dac):",
        "    val = gauss.send((dac.ch1.get(), dac.ch2.get()))",
        "    next(gauss)",
        "    return val",
        "\n",
        "dac = DummyInstrument('dac', gates=['ch1', 'ch2'])",
        "dmm = DummyInstrument('dmm', gates=['v1', 'v2'])",
        "station = qcodes.Station(dmm, dac)",
        "dmm.v1.get = partial(measure_gauss, dac)",
        "meas = Measurement()",
        "meas.register_parameter(dac.ch1)",
        "meas.register_parameter(dmm.v1, setpoints=(dac.ch1,))",
        "with meas.run() as datasaver:",
              "",
              "    for set_v in np.linspace(0, 25, 10):",
              "        dac.ch1.set(set_v)",
              "        get_v = dmm.v1.get()",
              "        datasaver.add_result((dac.ch1, set_v),",
              "                             (dmm.v1, get_v))"

    ], 
    "description": "Dummy instrument with measurement"

}

}